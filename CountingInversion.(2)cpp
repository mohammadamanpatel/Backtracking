long merge(vector<int>&arr,int start,int end,int mid,vector<int>&temp)
{
  int i = start;
  int j = mid+1;
  int k = start;
  long count = 0;
  while(i<=mid && j<=end)
  {
    if(arr[i]<=arr[j])
    {
      temp[k++] = arr[i++];
    }
    else{
      temp[k++] = arr[j++];
      count += mid - i + 1;
    }
  }
  while(i<=mid)
  {
     temp[k++] = arr[i++];
  }
  while(j<=end)
  {
    temp[k++] = arr[j++];
  }
  while(start<=end)
  {
    arr[start] = temp[start]; 
    start++;
  }
  return count;
}
long mergesort(vector<int>&arr,int start,int end,vector<int>&temp)
{
  long count = 0;
  int mid = start + (end-start)/2;
  if(start>=end)
    {
        return 0;
    }
  count+=mergesort(arr,start,mid,temp);
  count+=mergesort(arr,mid+1,end,temp);
  count+=merge(arr,start,end,mid,temp);
  return count;
}
long countInversions(vector<int> arr) {
  long count = 0;
    vector<int>temp(arr.size(),0);
    int start = 0;
    int end = arr.size()-1;
    count = mergesort(arr,start,end,temp); 
    return count;
}
